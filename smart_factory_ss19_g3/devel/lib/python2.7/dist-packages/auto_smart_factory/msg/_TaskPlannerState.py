# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from auto_smart_factory/TaskPlannerState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import auto_smart_factory.msg
import genpy

class TaskPlannerState(genpy.Message):
  _md5sum = "d68409037940351182a0a455e9df6526"
  _type = "auto_smart_factory/TaskPlannerState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """time stamp

# number of registered robots
uint32 registered_robots

# States of the current requests
RequestStatus[] requests

# states of the current tasks
TaskState[] tasks


================================================================================
MSG: auto_smart_factory/RequestStatus
# time stamp for this status message
time stamp

# id of this request
uint32 id

# type of request. This is either 'input' or 'output'
string type

# the package type
PackageConfiguration pkg_config

# time when this request was created
time create_time

# message describing the current status of this request
string status


================================================================================
MSG: auto_smart_factory/PackageConfiguration
# package type id (!= package id)
uint32 id

# package dimensions
float32 width
float32 height

# package weight
float32 weight


================================================================================
MSG: auto_smart_factory/TaskState
# unique task id
uint32 id

# the state of the task. Valid values: 'initialized', 'running', 'waiting for package', ...
string status

# timings (0 if not yet set)

# time when the associated request was created
time requestCreateTime

# timestamp when the task was started
time runTime

# timestamp when the load was acknowledged
time loadTime

# timestamp when the unload was acknowledged
time unloadTime

# estimated duration from run to unload estimated by the roadmap planner
duration estimatedDuration

# task data

# id of the assigned robot
string robot

# Package this task is dealing with.
Package package

# The source and the target of this task
uint32 sourceTray
uint32 targetTray


================================================================================
MSG: auto_smart_factory/Package
# the unique id of this package
uint32 id

# the id of the package type/configuration
uint32 type_id

"""
  __slots__ = ['stamp','registered_robots','requests','tasks']
  _slot_types = ['time','uint32','auto_smart_factory/RequestStatus[]','auto_smart_factory/TaskState[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,registered_robots,requests,tasks

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TaskPlannerState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.registered_robots is None:
        self.registered_robots = 0
      if self.requests is None:
        self.requests = []
      if self.tasks is None:
        self.tasks = []
    else:
      self.stamp = genpy.Time()
      self.registered_robots = 0
      self.requests = []
      self.tasks = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.stamp.secs, _x.stamp.nsecs, _x.registered_robots))
      length = len(self.requests)
      buff.write(_struct_I.pack(length))
      for val1 in self.requests:
        _v1 = val1.stamp
        _x = _v1
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        buff.write(_get_struct_I().pack(val1.id))
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v2 = val1.pkg_config
        _x = _v2
        buff.write(_get_struct_I3f().pack(_x.id, _x.width, _x.height, _x.weight))
        _v3 = val1.create_time
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = val1.status
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.tasks)
      buff.write(_struct_I.pack(length))
      for val1 in self.tasks:
        buff.write(_get_struct_I().pack(val1.id))
        _x = val1.status
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v4 = val1.requestCreateTime
        _x = _v4
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v5 = val1.runTime
        _x = _v5
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v6 = val1.loadTime
        _x = _v6
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v7 = val1.unloadTime
        _x = _v7
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v8 = val1.estimatedDuration
        _x = _v8
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1.robot
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v9 = val1.package
        _x = _v9
        buff.write(_get_struct_2I().pack(_x.id, _x.type_id))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.sourceTray, _x.targetTray))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.requests is None:
        self.requests = None
      if self.tasks is None:
        self.tasks = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.stamp.secs, _x.stamp.nsecs, _x.registered_robots,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.requests = []
      for i in range(0, length):
        val1 = auto_smart_factory.msg.RequestStatus()
        _v10 = val1.stamp
        _x = _v10
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (val1.id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8')
        else:
          val1.type = str[start:end]
        _v11 = val1.pkg_config
        _x = _v11
        start = end
        end += 16
        (_x.id, _x.width, _x.height, _x.weight,) = _get_struct_I3f().unpack(str[start:end])
        _v12 = val1.create_time
        _x = _v12
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.status = str[start:end].decode('utf-8')
        else:
          val1.status = str[start:end]
        self.requests.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tasks = []
      for i in range(0, length):
        val1 = auto_smart_factory.msg.TaskState()
        start = end
        end += 4
        (val1.id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.status = str[start:end].decode('utf-8')
        else:
          val1.status = str[start:end]
        _v13 = val1.requestCreateTime
        _x = _v13
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v14 = val1.runTime
        _x = _v14
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v15 = val1.loadTime
        _x = _v15
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v16 = val1.unloadTime
        _x = _v16
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v17 = val1.estimatedDuration
        _x = _v17
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.robot = str[start:end].decode('utf-8')
        else:
          val1.robot = str[start:end]
        _v18 = val1.package
        _x = _v18
        start = end
        end += 8
        (_x.id, _x.type_id,) = _get_struct_2I().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.sourceTray, _x.targetTray,) = _get_struct_2I().unpack(str[start:end])
        self.tasks.append(val1)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.stamp.secs, _x.stamp.nsecs, _x.registered_robots))
      length = len(self.requests)
      buff.write(_struct_I.pack(length))
      for val1 in self.requests:
        _v19 = val1.stamp
        _x = _v19
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        buff.write(_get_struct_I().pack(val1.id))
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v20 = val1.pkg_config
        _x = _v20
        buff.write(_get_struct_I3f().pack(_x.id, _x.width, _x.height, _x.weight))
        _v21 = val1.create_time
        _x = _v21
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = val1.status
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.tasks)
      buff.write(_struct_I.pack(length))
      for val1 in self.tasks:
        buff.write(_get_struct_I().pack(val1.id))
        _x = val1.status
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v22 = val1.requestCreateTime
        _x = _v22
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v23 = val1.runTime
        _x = _v23
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v24 = val1.loadTime
        _x = _v24
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v25 = val1.unloadTime
        _x = _v25
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v26 = val1.estimatedDuration
        _x = _v26
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1.robot
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v27 = val1.package
        _x = _v27
        buff.write(_get_struct_2I().pack(_x.id, _x.type_id))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.sourceTray, _x.targetTray))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.requests is None:
        self.requests = None
      if self.tasks is None:
        self.tasks = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.stamp.secs, _x.stamp.nsecs, _x.registered_robots,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.requests = []
      for i in range(0, length):
        val1 = auto_smart_factory.msg.RequestStatus()
        _v28 = val1.stamp
        _x = _v28
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (val1.id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8')
        else:
          val1.type = str[start:end]
        _v29 = val1.pkg_config
        _x = _v29
        start = end
        end += 16
        (_x.id, _x.width, _x.height, _x.weight,) = _get_struct_I3f().unpack(str[start:end])
        _v30 = val1.create_time
        _x = _v30
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.status = str[start:end].decode('utf-8')
        else:
          val1.status = str[start:end]
        self.requests.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tasks = []
      for i in range(0, length):
        val1 = auto_smart_factory.msg.TaskState()
        start = end
        end += 4
        (val1.id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.status = str[start:end].decode('utf-8')
        else:
          val1.status = str[start:end]
        _v31 = val1.requestCreateTime
        _x = _v31
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v32 = val1.runTime
        _x = _v32
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v33 = val1.loadTime
        _x = _v33
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v34 = val1.unloadTime
        _x = _v34
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v35 = val1.estimatedDuration
        _x = _v35
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.robot = str[start:end].decode('utf-8')
        else:
          val1.robot = str[start:end]
        _v36 = val1.package
        _x = _v36
        start = end
        end += 8
        (_x.id, _x.type_id,) = _get_struct_2I().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.sourceTray, _x.targetTray,) = _get_struct_2I().unpack(str[start:end])
        self.tasks.append(val1)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_I3f = None
def _get_struct_I3f():
    global _struct_I3f
    if _struct_I3f is None:
        _struct_I3f = struct.Struct("<I3f")
    return _struct_I3f
