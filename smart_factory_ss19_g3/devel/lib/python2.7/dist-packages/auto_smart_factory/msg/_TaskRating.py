# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from auto_smart_factory/TaskRating.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TaskRating(genpy.Message):
  _md5sum = "149ffda46e6e0172c546d8c62178a040"
  _type = "auto_smart_factory/TaskRating"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# response of a robot, if it wants to take a certain task and if so what its score is

uint32 request_id
string robot_id
uint32 start_id
uint32 end_id
bool reject
float64 score
float64 estimatedDuration
"""
  __slots__ = ['request_id','robot_id','start_id','end_id','reject','score','estimatedDuration']
  _slot_types = ['uint32','string','uint32','uint32','bool','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       request_id,robot_id,start_id,end_id,reject,score,estimatedDuration

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TaskRating, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.request_id is None:
        self.request_id = 0
      if self.robot_id is None:
        self.robot_id = ''
      if self.start_id is None:
        self.start_id = 0
      if self.end_id is None:
        self.end_id = 0
      if self.reject is None:
        self.reject = False
      if self.score is None:
        self.score = 0.
      if self.estimatedDuration is None:
        self.estimatedDuration = 0.
    else:
      self.request_id = 0
      self.robot_id = ''
      self.start_id = 0
      self.end_id = 0
      self.reject = False
      self.score = 0.
      self.estimatedDuration = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_I().pack(self.request_id))
      _x = self.robot_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2IB2d().pack(_x.start_id, _x.end_id, _x.reject, _x.score, _x.estimatedDuration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.request_id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_id = str[start:end].decode('utf-8')
      else:
        self.robot_id = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.start_id, _x.end_id, _x.reject, _x.score, _x.estimatedDuration,) = _get_struct_2IB2d().unpack(str[start:end])
      self.reject = bool(self.reject)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_I().pack(self.request_id))
      _x = self.robot_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2IB2d().pack(_x.start_id, _x.end_id, _x.reject, _x.score, _x.estimatedDuration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.request_id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_id = str[start:end].decode('utf-8')
      else:
        self.robot_id = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.start_id, _x.end_id, _x.reject, _x.score, _x.estimatedDuration,) = _get_struct_2IB2d().unpack(str[start:end])
      self.reject = bool(self.reject)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2IB2d = None
def _get_struct_2IB2d():
    global _struct_2IB2d
    if _struct_2IB2d is None:
        _struct_2IB2d = struct.Struct("<2IB2d")
    return _struct_2IB2d
