# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from auto_smart_factory/RequestStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import auto_smart_factory.msg
import genpy

class RequestStatus(genpy.Message):
  _md5sum = "bc3a3dfca62979fa9ca3cdbb8d695ce9"
  _type = "auto_smart_factory/RequestStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# time stamp for this status message
time stamp

# id of this request
uint32 id

# type of request. This is either 'input' or 'output'
string type

# the package type
PackageConfiguration pkg_config

# time when this request was created
time create_time

# message describing the current status of this request
string status


================================================================================
MSG: auto_smart_factory/PackageConfiguration
# package type id (!= package id)
uint32 id

# package dimensions
float32 width
float32 height

# package weight
float32 weight

"""
  __slots__ = ['stamp','id','type','pkg_config','create_time','status']
  _slot_types = ['time','uint32','string','auto_smart_factory/PackageConfiguration','time','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,id,type,pkg_config,create_time,status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RequestStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.id is None:
        self.id = 0
      if self.type is None:
        self.type = ''
      if self.pkg_config is None:
        self.pkg_config = auto_smart_factory.msg.PackageConfiguration()
      if self.create_time is None:
        self.create_time = genpy.Time()
      if self.status is None:
        self.status = ''
    else:
      self.stamp = genpy.Time()
      self.id = 0
      self.type = ''
      self.pkg_config = auto_smart_factory.msg.PackageConfiguration()
      self.create_time = genpy.Time()
      self.status = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.stamp.secs, _x.stamp.nsecs, _x.id))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I3f2I().pack(_x.pkg_config.id, _x.pkg_config.width, _x.pkg_config.height, _x.pkg_config.weight, _x.create_time.secs, _x.create_time.nsecs))
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.pkg_config is None:
        self.pkg_config = auto_smart_factory.msg.PackageConfiguration()
      if self.create_time is None:
        self.create_time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.stamp.secs, _x.stamp.nsecs, _x.id,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8')
      else:
        self.type = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.pkg_config.id, _x.pkg_config.width, _x.pkg_config.height, _x.pkg_config.weight, _x.create_time.secs, _x.create_time.nsecs,) = _get_struct_I3f2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8')
      else:
        self.status = str[start:end]
      self.stamp.canon()
      self.create_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.stamp.secs, _x.stamp.nsecs, _x.id))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I3f2I().pack(_x.pkg_config.id, _x.pkg_config.width, _x.pkg_config.height, _x.pkg_config.weight, _x.create_time.secs, _x.create_time.nsecs))
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.pkg_config is None:
        self.pkg_config = auto_smart_factory.msg.PackageConfiguration()
      if self.create_time is None:
        self.create_time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.stamp.secs, _x.stamp.nsecs, _x.id,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8')
      else:
        self.type = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.pkg_config.id, _x.pkg_config.width, _x.pkg_config.height, _x.pkg_config.weight, _x.create_time.secs, _x.create_time.nsecs,) = _get_struct_I3f2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8')
      else:
        self.status = str[start:end]
      self.stamp.canon()
      self.create_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_I3f2I = None
def _get_struct_I3f2I():
    global _struct_I3f2I
    if _struct_I3f2I is None:
        _struct_I3f2I = struct.Struct("<I3f2I")
    return _struct_I3f2I
