# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from auto_smart_factory/RoadmapGraph.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class RoadmapGraph(genpy.Message):
  _md5sum = "9ee7bfaa057f75fef2b5b8f6e79f93ea"
  _type = "auto_smart_factory/RoadmapGraph"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Contains the graph created by Roadmap Generator and the corresponding coordinates.

# node names are assumed to be natural numbers from 0 to num_nodes
int32 num_nodes
int32 num_edges

# coordinates that correspond to nodes
geometry_msgs/Point[] coordinates

# integer coordinates correspond to real coordinates but grid nodes have distance 1
int32[] x_coord_int
int32[] y_coord_int

# resolution is the distance between two grid nodes
float64 resolution
float64 height
float64 width

# edges are given as two arrays, third array contains the length (in real value, not int)
int32[] start_nodes
int32[] end_nodes
float64[] lengths

# contains value True if edge is grid edge, False otherwise
bool[] is_grid_edge

# start_nodes.length() == end_nodes.length() == lengths.length() == is_grid_edge.length() must always be true
 



================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['num_nodes','num_edges','coordinates','x_coord_int','y_coord_int','resolution','height','width','start_nodes','end_nodes','lengths','is_grid_edge']
  _slot_types = ['int32','int32','geometry_msgs/Point[]','int32[]','int32[]','float64','float64','float64','int32[]','int32[]','float64[]','bool[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       num_nodes,num_edges,coordinates,x_coord_int,y_coord_int,resolution,height,width,start_nodes,end_nodes,lengths,is_grid_edge

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RoadmapGraph, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.num_nodes is None:
        self.num_nodes = 0
      if self.num_edges is None:
        self.num_edges = 0
      if self.coordinates is None:
        self.coordinates = []
      if self.x_coord_int is None:
        self.x_coord_int = []
      if self.y_coord_int is None:
        self.y_coord_int = []
      if self.resolution is None:
        self.resolution = 0.
      if self.height is None:
        self.height = 0.
      if self.width is None:
        self.width = 0.
      if self.start_nodes is None:
        self.start_nodes = []
      if self.end_nodes is None:
        self.end_nodes = []
      if self.lengths is None:
        self.lengths = []
      if self.is_grid_edge is None:
        self.is_grid_edge = []
    else:
      self.num_nodes = 0
      self.num_edges = 0
      self.coordinates = []
      self.x_coord_int = []
      self.y_coord_int = []
      self.resolution = 0.
      self.height = 0.
      self.width = 0.
      self.start_nodes = []
      self.end_nodes = []
      self.lengths = []
      self.is_grid_edge = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i().pack(_x.num_nodes, _x.num_edges))
      length = len(self.coordinates)
      buff.write(_struct_I.pack(length))
      for val1 in self.coordinates:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.x_coord_int)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.x_coord_int))
      length = len(self.y_coord_int)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.y_coord_int))
      _x = self
      buff.write(_get_struct_3d().pack(_x.resolution, _x.height, _x.width))
      length = len(self.start_nodes)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.start_nodes))
      length = len(self.end_nodes)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.end_nodes))
      length = len(self.lengths)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.lengths))
      length = len(self.is_grid_edge)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.is_grid_edge))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.coordinates is None:
        self.coordinates = None
      end = 0
      _x = self
      start = end
      end += 8
      (_x.num_nodes, _x.num_edges,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.coordinates = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.coordinates.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.x_coord_int = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.y_coord_int = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 24
      (_x.resolution, _x.height, _x.width,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.start_nodes = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.end_nodes = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.lengths = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.is_grid_edge = struct.unpack(pattern, str[start:end])
      self.is_grid_edge = map(bool, self.is_grid_edge)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i().pack(_x.num_nodes, _x.num_edges))
      length = len(self.coordinates)
      buff.write(_struct_I.pack(length))
      for val1 in self.coordinates:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.x_coord_int)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.x_coord_int.tostring())
      length = len(self.y_coord_int)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.y_coord_int.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.resolution, _x.height, _x.width))
      length = len(self.start_nodes)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.start_nodes.tostring())
      length = len(self.end_nodes)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.end_nodes.tostring())
      length = len(self.lengths)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.lengths.tostring())
      length = len(self.is_grid_edge)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.is_grid_edge.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.coordinates is None:
        self.coordinates = None
      end = 0
      _x = self
      start = end
      end += 8
      (_x.num_nodes, _x.num_edges,) = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.coordinates = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.coordinates.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.x_coord_int = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.y_coord_int = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 24
      (_x.resolution, _x.height, _x.width,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.start_nodes = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.end_nodes = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.lengths = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.is_grid_edge = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.is_grid_edge = map(bool, self.is_grid_edge)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
