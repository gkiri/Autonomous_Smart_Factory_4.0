# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from auto_smart_factory/TaskState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import auto_smart_factory.msg
import genpy

class TaskState(genpy.Message):
  _md5sum = "b2297c0e49c8c648ed6360e170926b8d"
  _type = "auto_smart_factory/TaskState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# unique task id
uint32 id

# the state of the task. Valid values: 'initialized', 'running', 'waiting for package', ...
string status

# timings (0 if not yet set)

# time when the associated request was created
time requestCreateTime

# timestamp when the task was started
time runTime

# timestamp when the load was acknowledged
time loadTime

# timestamp when the unload was acknowledged
time unloadTime

# estimated duration from run to unload estimated by the roadmap planner
duration estimatedDuration

# task data

# id of the assigned robot
string robot

# Package this task is dealing with.
Package package

# The source and the target of this task
uint32 sourceTray
uint32 targetTray


================================================================================
MSG: auto_smart_factory/Package
# the unique id of this package
uint32 id

# the id of the package type/configuration
uint32 type_id

"""
  __slots__ = ['id','status','requestCreateTime','runTime','loadTime','unloadTime','estimatedDuration','robot','package','sourceTray','targetTray']
  _slot_types = ['uint32','string','time','time','time','time','duration','string','auto_smart_factory/Package','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,status,requestCreateTime,runTime,loadTime,unloadTime,estimatedDuration,robot,package,sourceTray,targetTray

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TaskState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.status is None:
        self.status = ''
      if self.requestCreateTime is None:
        self.requestCreateTime = genpy.Time()
      if self.runTime is None:
        self.runTime = genpy.Time()
      if self.loadTime is None:
        self.loadTime = genpy.Time()
      if self.unloadTime is None:
        self.unloadTime = genpy.Time()
      if self.estimatedDuration is None:
        self.estimatedDuration = genpy.Duration()
      if self.robot is None:
        self.robot = ''
      if self.package is None:
        self.package = auto_smart_factory.msg.Package()
      if self.sourceTray is None:
        self.sourceTray = 0
      if self.targetTray is None:
        self.targetTray = 0
    else:
      self.id = 0
      self.status = ''
      self.requestCreateTime = genpy.Time()
      self.runTime = genpy.Time()
      self.loadTime = genpy.Time()
      self.unloadTime = genpy.Time()
      self.estimatedDuration = genpy.Duration()
      self.robot = ''
      self.package = auto_smart_factory.msg.Package()
      self.sourceTray = 0
      self.targetTray = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_I().pack(self.id))
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_8I2i().pack(_x.requestCreateTime.secs, _x.requestCreateTime.nsecs, _x.runTime.secs, _x.runTime.nsecs, _x.loadTime.secs, _x.loadTime.nsecs, _x.unloadTime.secs, _x.unloadTime.nsecs, _x.estimatedDuration.secs, _x.estimatedDuration.nsecs))
      _x = self.robot
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4I().pack(_x.package.id, _x.package.type_id, _x.sourceTray, _x.targetTray))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.requestCreateTime is None:
        self.requestCreateTime = genpy.Time()
      if self.runTime is None:
        self.runTime = genpy.Time()
      if self.loadTime is None:
        self.loadTime = genpy.Time()
      if self.unloadTime is None:
        self.unloadTime = genpy.Time()
      if self.estimatedDuration is None:
        self.estimatedDuration = genpy.Duration()
      if self.package is None:
        self.package = auto_smart_factory.msg.Package()
      end = 0
      start = end
      end += 4
      (self.id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8')
      else:
        self.status = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.requestCreateTime.secs, _x.requestCreateTime.nsecs, _x.runTime.secs, _x.runTime.nsecs, _x.loadTime.secs, _x.loadTime.nsecs, _x.unloadTime.secs, _x.unloadTime.nsecs, _x.estimatedDuration.secs, _x.estimatedDuration.nsecs,) = _get_struct_8I2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot = str[start:end].decode('utf-8')
      else:
        self.robot = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.package.id, _x.package.type_id, _x.sourceTray, _x.targetTray,) = _get_struct_4I().unpack(str[start:end])
      self.requestCreateTime.canon()
      self.runTime.canon()
      self.loadTime.canon()
      self.unloadTime.canon()
      self.estimatedDuration.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_I().pack(self.id))
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_8I2i().pack(_x.requestCreateTime.secs, _x.requestCreateTime.nsecs, _x.runTime.secs, _x.runTime.nsecs, _x.loadTime.secs, _x.loadTime.nsecs, _x.unloadTime.secs, _x.unloadTime.nsecs, _x.estimatedDuration.secs, _x.estimatedDuration.nsecs))
      _x = self.robot
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4I().pack(_x.package.id, _x.package.type_id, _x.sourceTray, _x.targetTray))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.requestCreateTime is None:
        self.requestCreateTime = genpy.Time()
      if self.runTime is None:
        self.runTime = genpy.Time()
      if self.loadTime is None:
        self.loadTime = genpy.Time()
      if self.unloadTime is None:
        self.unloadTime = genpy.Time()
      if self.estimatedDuration is None:
        self.estimatedDuration = genpy.Duration()
      if self.package is None:
        self.package = auto_smart_factory.msg.Package()
      end = 0
      start = end
      end += 4
      (self.id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8')
      else:
        self.status = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.requestCreateTime.secs, _x.requestCreateTime.nsecs, _x.runTime.secs, _x.runTime.nsecs, _x.loadTime.secs, _x.loadTime.nsecs, _x.unloadTime.secs, _x.unloadTime.nsecs, _x.estimatedDuration.secs, _x.estimatedDuration.nsecs,) = _get_struct_8I2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot = str[start:end].decode('utf-8')
      else:
        self.robot = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.package.id, _x.package.type_id, _x.sourceTray, _x.targetTray,) = _get_struct_4I().unpack(str[start:end])
      self.requestCreateTime.canon()
      self.runTime.canon()
      self.loadTime.canon()
      self.unloadTime.canon()
      self.estimatedDuration.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8I2i = None
def _get_struct_8I2i():
    global _struct_8I2i
    if _struct_8I2i is None:
        _struct_8I2i = struct.Struct("<8I2i")
    return _struct_8I2i
_struct_4I = None
def _get_struct_4I():
    global _struct_4I
    if _struct_4I is None:
        _struct_4I = struct.Struct("<4I")
    return _struct_4I
