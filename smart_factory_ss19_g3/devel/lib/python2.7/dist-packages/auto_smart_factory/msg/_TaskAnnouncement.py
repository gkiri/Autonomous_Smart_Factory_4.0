# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from auto_smart_factory/TaskAnnouncement.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class TaskAnnouncement(genpy.Message):
  _md5sum = "e8ab73e2a72622150a41cf7e28715948"
  _type = "auto_smart_factory/TaskAnnouncement"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Announces a task to the robots.

uint32 request_id
uint32[] start_ids
uint32[] end_ids
time timeout
"""
  __slots__ = ['request_id','start_ids','end_ids','timeout']
  _slot_types = ['uint32','uint32[]','uint32[]','time']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       request_id,start_ids,end_ids,timeout

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TaskAnnouncement, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.request_id is None:
        self.request_id = 0
      if self.start_ids is None:
        self.start_ids = []
      if self.end_ids is None:
        self.end_ids = []
      if self.timeout is None:
        self.timeout = genpy.Time()
    else:
      self.request_id = 0
      self.start_ids = []
      self.end_ids = []
      self.timeout = genpy.Time()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_I().pack(self.request_id))
      length = len(self.start_ids)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.start_ids))
      length = len(self.end_ids)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.end_ids))
      _x = self
      buff.write(_get_struct_2I().pack(_x.timeout.secs, _x.timeout.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.timeout is None:
        self.timeout = genpy.Time()
      end = 0
      start = end
      end += 4
      (self.request_id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.start_ids = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.end_ids = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 8
      (_x.timeout.secs, _x.timeout.nsecs,) = _get_struct_2I().unpack(str[start:end])
      self.timeout.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_I().pack(self.request_id))
      length = len(self.start_ids)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.start_ids.tostring())
      length = len(self.end_ids)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.end_ids.tostring())
      _x = self
      buff.write(_get_struct_2I().pack(_x.timeout.secs, _x.timeout.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.timeout is None:
        self.timeout = genpy.Time()
      end = 0
      start = end
      end += 4
      (self.request_id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.start_ids = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.end_ids = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 8
      (_x.timeout.secs, _x.timeout.nsecs,) = _get_struct_2I().unpack(str[start:end])
      self.timeout.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
