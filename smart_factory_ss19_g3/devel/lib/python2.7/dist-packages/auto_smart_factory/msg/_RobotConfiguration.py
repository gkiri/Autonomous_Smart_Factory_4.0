# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from auto_smart_factory/RobotConfiguration.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RobotConfiguration(genpy.Message):
  _md5sum = "a088bac167b7075ab4169c49586042e9"
  _type = "auto_smart_factory/RobotConfiguration"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# name of this robot type
string type_name

# charging rate of the battery
float32 charging_rate

# discharging rate of the battery
float32 discharging_rate

# minimum linear velocity in [m/s]
float32 min_linear_vel

# maximum linear velocity in [m/s]
float32 max_linear_vel

# maximum angular velocity in [rad/s]
float32 max_angular_vel

# maximum radius of the robot
float32 radius

# maximum package weight in [kg]
float32 max_load
"""
  __slots__ = ['type_name','charging_rate','discharging_rate','min_linear_vel','max_linear_vel','max_angular_vel','radius','max_load']
  _slot_types = ['string','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type_name,charging_rate,discharging_rate,min_linear_vel,max_linear_vel,max_angular_vel,radius,max_load

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotConfiguration, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.type_name is None:
        self.type_name = ''
      if self.charging_rate is None:
        self.charging_rate = 0.
      if self.discharging_rate is None:
        self.discharging_rate = 0.
      if self.min_linear_vel is None:
        self.min_linear_vel = 0.
      if self.max_linear_vel is None:
        self.max_linear_vel = 0.
      if self.max_angular_vel is None:
        self.max_angular_vel = 0.
      if self.radius is None:
        self.radius = 0.
      if self.max_load is None:
        self.max_load = 0.
    else:
      self.type_name = ''
      self.charging_rate = 0.
      self.discharging_rate = 0.
      self.min_linear_vel = 0.
      self.max_linear_vel = 0.
      self.max_angular_vel = 0.
      self.radius = 0.
      self.max_load = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.type_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7f().pack(_x.charging_rate, _x.discharging_rate, _x.min_linear_vel, _x.max_linear_vel, _x.max_angular_vel, _x.radius, _x.max_load))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type_name = str[start:end].decode('utf-8')
      else:
        self.type_name = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.charging_rate, _x.discharging_rate, _x.min_linear_vel, _x.max_linear_vel, _x.max_angular_vel, _x.radius, _x.max_load,) = _get_struct_7f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.type_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7f().pack(_x.charging_rate, _x.discharging_rate, _x.min_linear_vel, _x.max_linear_vel, _x.max_angular_vel, _x.radius, _x.max_load))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type_name = str[start:end].decode('utf-8')
      else:
        self.type_name = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.charging_rate, _x.discharging_rate, _x.min_linear_vel, _x.max_linear_vel, _x.max_angular_vel, _x.radius, _x.max_load,) = _get_struct_7f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7f = None
def _get_struct_7f():
    global _struct_7f
    if _struct_7f is None:
        _struct_7f = struct.Struct("<7f")
    return _struct_7f
