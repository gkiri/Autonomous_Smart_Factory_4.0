# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from auto_smart_factory/GetTrayStateRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetTrayStateRequest(genpy.Message):
  _md5sum = "1f5323c6390f45b7203b662400a202be"
  _type = "auto_smart_factory/GetTrayStateRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 trayId
"""
  __slots__ = ['trayId']
  _slot_types = ['uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       trayId

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetTrayStateRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.trayId is None:
        self.trayId = 0
    else:
      self.trayId = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_I().pack(self.trayId))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.trayId,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_I().pack(self.trayId))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.trayId,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from auto_smart_factory/GetTrayStateResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import auto_smart_factory.msg

class GetTrayStateResponse(genpy.Message):
  _md5sum = "e8fc1740bf5eaf110ae8d47041b731e7"
  _type = "auto_smart_factory/GetTrayStateResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """TrayState state



================================================================================
MSG: auto_smart_factory/TrayState
# the unique tray ID
uint32 id

# Indicates whether the tray is occupied or not.
bool occupied

# Availability of the tray. If false the the tray is allocated by a task.
bool available

# information about the package stored in this tray (only valid if state != free)
Package package


================================================================================
MSG: auto_smart_factory/Package
# the unique id of this package
uint32 id

# the id of the package type/configuration
uint32 type_id

"""
  __slots__ = ['state']
  _slot_types = ['auto_smart_factory/TrayState']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetTrayStateResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = auto_smart_factory.msg.TrayState()
    else:
      self.state = auto_smart_factory.msg.TrayState()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I2B2I().pack(_x.state.id, _x.state.occupied, _x.state.available, _x.state.package.id, _x.state.package.type_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.state is None:
        self.state = auto_smart_factory.msg.TrayState()
      end = 0
      _x = self
      start = end
      end += 14
      (_x.state.id, _x.state.occupied, _x.state.available, _x.state.package.id, _x.state.package.type_id,) = _get_struct_I2B2I().unpack(str[start:end])
      self.state.occupied = bool(self.state.occupied)
      self.state.available = bool(self.state.available)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I2B2I().pack(_x.state.id, _x.state.occupied, _x.state.available, _x.state.package.id, _x.state.package.type_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.state is None:
        self.state = auto_smart_factory.msg.TrayState()
      end = 0
      _x = self
      start = end
      end += 14
      (_x.state.id, _x.state.occupied, _x.state.available, _x.state.package.id, _x.state.package.type_id,) = _get_struct_I2B2I().unpack(str[start:end])
      self.state.occupied = bool(self.state.occupied)
      self.state.available = bool(self.state.available)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I2B2I = None
def _get_struct_I2B2I():
    global _struct_I2B2I
    if _struct_I2B2I is None:
        _struct_I2B2I = struct.Struct("<I2B2I")
    return _struct_I2B2I
class GetTrayState(object):
  _type          = 'auto_smart_factory/GetTrayState'
  _md5sum = '9b8e34a8997f8c20f3dac59f7997bfaa'
  _request_class  = GetTrayStateRequest
  _response_class = GetTrayStateResponse
