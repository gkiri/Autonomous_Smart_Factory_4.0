# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from auto_smart_factory/RequestNewPathRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class RequestNewPathRequest(genpy.Message):
  _md5sum = "d8cfcd85d3fd961cc950795c8464bf18"
  _type = "auto_smart_factory/RequestNewPathRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """







string agent_id
bool next_chunk

geometry_msgs/Point start_node
geometry_msgs/Point end_node


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['agent_id','next_chunk','start_node','end_node']
  _slot_types = ['string','bool','geometry_msgs/Point','geometry_msgs/Point']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       agent_id,next_chunk,start_node,end_node

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RequestNewPathRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.agent_id is None:
        self.agent_id = ''
      if self.next_chunk is None:
        self.next_chunk = False
      if self.start_node is None:
        self.start_node = geometry_msgs.msg.Point()
      if self.end_node is None:
        self.end_node = geometry_msgs.msg.Point()
    else:
      self.agent_id = ''
      self.next_chunk = False
      self.start_node = geometry_msgs.msg.Point()
      self.end_node = geometry_msgs.msg.Point()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.agent_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B6d().pack(_x.next_chunk, _x.start_node.x, _x.start_node.y, _x.start_node.z, _x.end_node.x, _x.end_node.y, _x.end_node.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.start_node is None:
        self.start_node = geometry_msgs.msg.Point()
      if self.end_node is None:
        self.end_node = geometry_msgs.msg.Point()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.agent_id = str[start:end].decode('utf-8')
      else:
        self.agent_id = str[start:end]
      _x = self
      start = end
      end += 49
      (_x.next_chunk, _x.start_node.x, _x.start_node.y, _x.start_node.z, _x.end_node.x, _x.end_node.y, _x.end_node.z,) = _get_struct_B6d().unpack(str[start:end])
      self.next_chunk = bool(self.next_chunk)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.agent_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B6d().pack(_x.next_chunk, _x.start_node.x, _x.start_node.y, _x.start_node.z, _x.end_node.x, _x.end_node.y, _x.end_node.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.start_node is None:
        self.start_node = geometry_msgs.msg.Point()
      if self.end_node is None:
        self.end_node = geometry_msgs.msg.Point()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.agent_id = str[start:end].decode('utf-8')
      else:
        self.agent_id = str[start:end]
      _x = self
      start = end
      end += 49
      (_x.next_chunk, _x.start_node.x, _x.start_node.y, _x.start_node.z, _x.end_node.x, _x.end_node.y, _x.end_node.z,) = _get_struct_B6d().unpack(str[start:end])
      self.next_chunk = bool(self.next_chunk)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B6d = None
def _get_struct_B6d():
    global _struct_B6d
    if _struct_B6d is None:
        _struct_B6d = struct.Struct("<B6d")
    return _struct_B6d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from auto_smart_factory/RequestNewPathResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class RequestNewPathResponse(genpy.Message):
  _md5sum = "e9b541c1ac67c5922456a461c613f073"
  _type = "auto_smart_factory/RequestNewPathResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
geometry_msgs/Point[] new_path_nodes
int32 main_path_length
bool is_last_chunk



================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['new_path_nodes','main_path_length','is_last_chunk']
  _slot_types = ['geometry_msgs/Point[]','int32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       new_path_nodes,main_path_length,is_last_chunk

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RequestNewPathResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.new_path_nodes is None:
        self.new_path_nodes = []
      if self.main_path_length is None:
        self.main_path_length = 0
      if self.is_last_chunk is None:
        self.is_last_chunk = False
    else:
      self.new_path_nodes = []
      self.main_path_length = 0
      self.is_last_chunk = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.new_path_nodes)
      buff.write(_struct_I.pack(length))
      for val1 in self.new_path_nodes:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_iB().pack(_x.main_path_length, _x.is_last_chunk))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.new_path_nodes is None:
        self.new_path_nodes = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.new_path_nodes = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.new_path_nodes.append(val1)
      _x = self
      start = end
      end += 5
      (_x.main_path_length, _x.is_last_chunk,) = _get_struct_iB().unpack(str[start:end])
      self.is_last_chunk = bool(self.is_last_chunk)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.new_path_nodes)
      buff.write(_struct_I.pack(length))
      for val1 in self.new_path_nodes:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_iB().pack(_x.main_path_length, _x.is_last_chunk))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.new_path_nodes is None:
        self.new_path_nodes = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.new_path_nodes = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.new_path_nodes.append(val1)
      _x = self
      start = end
      end += 5
      (_x.main_path_length, _x.is_last_chunk,) = _get_struct_iB().unpack(str[start:end])
      self.is_last_chunk = bool(self.is_last_chunk)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_iB = None
def _get_struct_iB():
    global _struct_iB
    if _struct_iB is None:
        _struct_iB = struct.Struct("<iB")
    return _struct_iB
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
class RequestNewPath(object):
  _type          = 'auto_smart_factory/RequestNewPath'
  _md5sum = 'fc441636b7a0cbdae9c6aa18043de91f'
  _request_class  = RequestNewPathRequest
  _response_class = RequestNewPathResponse
