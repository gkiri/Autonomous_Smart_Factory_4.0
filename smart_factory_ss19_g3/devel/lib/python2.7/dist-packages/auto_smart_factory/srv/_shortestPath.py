# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from auto_smart_factory/shortestPathRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import auto_smart_factory.msg
import geometry_msgs.msg

class shortestPathRequest(genpy.Message):
  _md5sum = "ad6fc6ebd965daba53bb6f3b9525c157"
  _type = "auto_smart_factory/shortestPathRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point p1
geometry_msgs/Point p2
RobotConfiguration robot

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: auto_smart_factory/RobotConfiguration
# name of this robot type
string type_name

# charging rate of the battery
float32 charging_rate

# discharging rate of the battery
float32 discharging_rate

# minimum linear velocity in [m/s]
float32 min_linear_vel

# maximum linear velocity in [m/s]
float32 max_linear_vel

# maximum angular velocity in [rad/s]
float32 max_angular_vel

# maximum radius of the robot
float32 radius

# maximum package weight in [kg]
float32 max_load
"""
  __slots__ = ['p1','p2','robot']
  _slot_types = ['geometry_msgs/Point','geometry_msgs/Point','auto_smart_factory/RobotConfiguration']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       p1,p2,robot

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(shortestPathRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.p1 is None:
        self.p1 = geometry_msgs.msg.Point()
      if self.p2 is None:
        self.p2 = geometry_msgs.msg.Point()
      if self.robot is None:
        self.robot = auto_smart_factory.msg.RobotConfiguration()
    else:
      self.p1 = geometry_msgs.msg.Point()
      self.p2 = geometry_msgs.msg.Point()
      self.robot = auto_smart_factory.msg.RobotConfiguration()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6d().pack(_x.p1.x, _x.p1.y, _x.p1.z, _x.p2.x, _x.p2.y, _x.p2.z))
      _x = self.robot.type_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7f().pack(_x.robot.charging_rate, _x.robot.discharging_rate, _x.robot.min_linear_vel, _x.robot.max_linear_vel, _x.robot.max_angular_vel, _x.robot.radius, _x.robot.max_load))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.p1 is None:
        self.p1 = geometry_msgs.msg.Point()
      if self.p2 is None:
        self.p2 = geometry_msgs.msg.Point()
      if self.robot is None:
        self.robot = auto_smart_factory.msg.RobotConfiguration()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.p1.x, _x.p1.y, _x.p1.z, _x.p2.x, _x.p2.y, _x.p2.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot.type_name = str[start:end].decode('utf-8')
      else:
        self.robot.type_name = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.robot.charging_rate, _x.robot.discharging_rate, _x.robot.min_linear_vel, _x.robot.max_linear_vel, _x.robot.max_angular_vel, _x.robot.radius, _x.robot.max_load,) = _get_struct_7f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6d().pack(_x.p1.x, _x.p1.y, _x.p1.z, _x.p2.x, _x.p2.y, _x.p2.z))
      _x = self.robot.type_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7f().pack(_x.robot.charging_rate, _x.robot.discharging_rate, _x.robot.min_linear_vel, _x.robot.max_linear_vel, _x.robot.max_angular_vel, _x.robot.radius, _x.robot.max_load))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.p1 is None:
        self.p1 = geometry_msgs.msg.Point()
      if self.p2 is None:
        self.p2 = geometry_msgs.msg.Point()
      if self.robot is None:
        self.robot = auto_smart_factory.msg.RobotConfiguration()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.p1.x, _x.p1.y, _x.p1.z, _x.p2.x, _x.p2.y, _x.p2.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot.type_name = str[start:end].decode('utf-8')
      else:
        self.robot.type_name = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.robot.charging_rate, _x.robot.discharging_rate, _x.robot.min_linear_vel, _x.robot.max_linear_vel, _x.robot.max_angular_vel, _x.robot.radius, _x.robot.max_load,) = _get_struct_7f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7f = None
def _get_struct_7f():
    global _struct_7f
    if _struct_7f is None:
        _struct_7f = struct.Struct("<7f")
    return _struct_7f
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from auto_smart_factory/shortestPathResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class shortestPathResponse(genpy.Message):
  _md5sum = "adb0f22f75a0a613240ae609a5826559"
  _type = "auto_smart_factory/shortestPathResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point[] resultPoints
float64 length


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['resultPoints','length']
  _slot_types = ['geometry_msgs/Point[]','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       resultPoints,length

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(shortestPathResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.resultPoints is None:
        self.resultPoints = []
      if self.length is None:
        self.length = 0.
    else:
      self.resultPoints = []
      self.length = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.resultPoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.resultPoints:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      buff.write(_get_struct_d().pack(self.length))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.resultPoints is None:
        self.resultPoints = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.resultPoints = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.resultPoints.append(val1)
      start = end
      end += 8
      (self.length,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.resultPoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.resultPoints:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      buff.write(_get_struct_d().pack(self.length))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.resultPoints is None:
        self.resultPoints = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.resultPoints = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.resultPoints.append(val1)
      start = end
      end += 8
      (self.length,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
class shortestPath(object):
  _type          = 'auto_smart_factory/shortestPath'
  _md5sum = 'e02be1ddd821db1040e02af717ecac84'
  _request_class  = shortestPathRequest
  _response_class = shortestPathResponse
