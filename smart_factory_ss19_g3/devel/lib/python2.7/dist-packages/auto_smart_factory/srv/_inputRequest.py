# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from auto_smart_factory/inputRequestRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import auto_smart_factory.msg
import geometry_msgs.msg

class inputRequestRequest(genpy.Message):
  _md5sum = "c5f1c61abfa9f0ec5f04789dee1a21a0"
  _type = "auto_smart_factory/inputRequestRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point posStart
uint32[] idTrays
uint32[] idInput
RobotConfiguration robot

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: auto_smart_factory/RobotConfiguration
# name of this robot type
string type_name

# charging rate of the battery
float32 charging_rate

# discharging rate of the battery
float32 discharging_rate

# minimum linear velocity in [m/s]
float32 min_linear_vel

# maximum linear velocity in [m/s]
float32 max_linear_vel

# maximum angular velocity in [rad/s]
float32 max_angular_vel

# maximum radius of the robot
float32 radius

# maximum package weight in [kg]
float32 max_load
"""
  __slots__ = ['posStart','idTrays','idInput','robot']
  _slot_types = ['geometry_msgs/Point','uint32[]','uint32[]','auto_smart_factory/RobotConfiguration']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       posStart,idTrays,idInput,robot

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(inputRequestRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.posStart is None:
        self.posStart = geometry_msgs.msg.Point()
      if self.idTrays is None:
        self.idTrays = []
      if self.idInput is None:
        self.idInput = []
      if self.robot is None:
        self.robot = auto_smart_factory.msg.RobotConfiguration()
    else:
      self.posStart = geometry_msgs.msg.Point()
      self.idTrays = []
      self.idInput = []
      self.robot = auto_smart_factory.msg.RobotConfiguration()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d().pack(_x.posStart.x, _x.posStart.y, _x.posStart.z))
      length = len(self.idTrays)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.idTrays))
      length = len(self.idInput)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.idInput))
      _x = self.robot.type_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7f().pack(_x.robot.charging_rate, _x.robot.discharging_rate, _x.robot.min_linear_vel, _x.robot.max_linear_vel, _x.robot.max_angular_vel, _x.robot.radius, _x.robot.max_load))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.posStart is None:
        self.posStart = geometry_msgs.msg.Point()
      if self.robot is None:
        self.robot = auto_smart_factory.msg.RobotConfiguration()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.posStart.x, _x.posStart.y, _x.posStart.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.idTrays = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.idInput = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot.type_name = str[start:end].decode('utf-8')
      else:
        self.robot.type_name = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.robot.charging_rate, _x.robot.discharging_rate, _x.robot.min_linear_vel, _x.robot.max_linear_vel, _x.robot.max_angular_vel, _x.robot.radius, _x.robot.max_load,) = _get_struct_7f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d().pack(_x.posStart.x, _x.posStart.y, _x.posStart.z))
      length = len(self.idTrays)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.idTrays.tostring())
      length = len(self.idInput)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.idInput.tostring())
      _x = self.robot.type_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7f().pack(_x.robot.charging_rate, _x.robot.discharging_rate, _x.robot.min_linear_vel, _x.robot.max_linear_vel, _x.robot.max_angular_vel, _x.robot.radius, _x.robot.max_load))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.posStart is None:
        self.posStart = geometry_msgs.msg.Point()
      if self.robot is None:
        self.robot = auto_smart_factory.msg.RobotConfiguration()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.posStart.x, _x.posStart.y, _x.posStart.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.idTrays = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.idInput = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot.type_name = str[start:end].decode('utf-8')
      else:
        self.robot.type_name = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.robot.charging_rate, _x.robot.discharging_rate, _x.robot.min_linear_vel, _x.robot.max_linear_vel, _x.robot.max_angular_vel, _x.robot.radius, _x.robot.max_load,) = _get_struct_7f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7f = None
def _get_struct_7f():
    global _struct_7f
    if _struct_7f is None:
        _struct_7f = struct.Struct("<7f")
    return _struct_7f
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from auto_smart_factory/inputRequestResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class inputRequestResponse(genpy.Message):
  _md5sum = "21e8c1a09d55cb30253f5a72104c5cd6"
  _type = "auto_smart_factory/inputRequestResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point[] pointsToInput
geometry_msgs/Point[] pointsToTray
uint32 idBest
float64 length


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['pointsToInput','pointsToTray','idBest','length']
  _slot_types = ['geometry_msgs/Point[]','geometry_msgs/Point[]','uint32','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pointsToInput,pointsToTray,idBest,length

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(inputRequestResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pointsToInput is None:
        self.pointsToInput = []
      if self.pointsToTray is None:
        self.pointsToTray = []
      if self.idBest is None:
        self.idBest = 0
      if self.length is None:
        self.length = 0.
    else:
      self.pointsToInput = []
      self.pointsToTray = []
      self.idBest = 0
      self.length = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.pointsToInput)
      buff.write(_struct_I.pack(length))
      for val1 in self.pointsToInput:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.pointsToTray)
      buff.write(_struct_I.pack(length))
      for val1 in self.pointsToTray:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_Id().pack(_x.idBest, _x.length))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pointsToInput is None:
        self.pointsToInput = None
      if self.pointsToTray is None:
        self.pointsToTray = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pointsToInput = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.pointsToInput.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pointsToTray = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.pointsToTray.append(val1)
      _x = self
      start = end
      end += 12
      (_x.idBest, _x.length,) = _get_struct_Id().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.pointsToInput)
      buff.write(_struct_I.pack(length))
      for val1 in self.pointsToInput:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.pointsToTray)
      buff.write(_struct_I.pack(length))
      for val1 in self.pointsToTray:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_Id().pack(_x.idBest, _x.length))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pointsToInput is None:
        self.pointsToInput = None
      if self.pointsToTray is None:
        self.pointsToTray = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pointsToInput = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.pointsToInput.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pointsToTray = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.pointsToTray.append(val1)
      _x = self
      start = end
      end += 12
      (_x.idBest, _x.length,) = _get_struct_Id().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Id = None
def _get_struct_Id():
    global _struct_Id
    if _struct_Id is None:
        _struct_Id = struct.Struct("<Id")
    return _struct_Id
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
class inputRequest(object):
  _type          = 'auto_smart_factory/inputRequest'
  _md5sum = '84b93cb25f9b147c760d7e90b220604b'
  _request_class  = inputRequestRequest
  _response_class = inputRequestResponse
