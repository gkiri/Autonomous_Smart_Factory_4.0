// Auto-generated. Do not edit!

// (in-package auto_smart_factory.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let RobotConfiguration = require('./RobotConfiguration.js');
let geometry_msgs = _finder('geometry_msgs');

//-----------------------------------------------------------

class Path {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.agent_id = null;
      this.robot_config = null;
      this.path_nodes = null;
      this.path_nodes_coordinates = null;
    }
    else {
      if (initObj.hasOwnProperty('agent_id')) {
        this.agent_id = initObj.agent_id
      }
      else {
        this.agent_id = '';
      }
      if (initObj.hasOwnProperty('robot_config')) {
        this.robot_config = initObj.robot_config
      }
      else {
        this.robot_config = new RobotConfiguration();
      }
      if (initObj.hasOwnProperty('path_nodes')) {
        this.path_nodes = initObj.path_nodes
      }
      else {
        this.path_nodes = [];
      }
      if (initObj.hasOwnProperty('path_nodes_coordinates')) {
        this.path_nodes_coordinates = initObj.path_nodes_coordinates
      }
      else {
        this.path_nodes_coordinates = [];
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type Path
    // Serialize message field [agent_id]
    bufferOffset = _serializer.string(obj.agent_id, buffer, bufferOffset);
    // Serialize message field [robot_config]
    bufferOffset = RobotConfiguration.serialize(obj.robot_config, buffer, bufferOffset);
    // Serialize message field [path_nodes]
    bufferOffset = _arraySerializer.int32(obj.path_nodes, buffer, bufferOffset, null);
    // Serialize message field [path_nodes_coordinates]
    // Serialize the length for message field [path_nodes_coordinates]
    bufferOffset = _serializer.uint32(obj.path_nodes_coordinates.length, buffer, bufferOffset);
    obj.path_nodes_coordinates.forEach((val) => {
      bufferOffset = geometry_msgs.msg.Point.serialize(val, buffer, bufferOffset);
    });
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type Path
    let len;
    let data = new Path(null);
    // Deserialize message field [agent_id]
    data.agent_id = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [robot_config]
    data.robot_config = RobotConfiguration.deserialize(buffer, bufferOffset);
    // Deserialize message field [path_nodes]
    data.path_nodes = _arrayDeserializer.int32(buffer, bufferOffset, null)
    // Deserialize message field [path_nodes_coordinates]
    // Deserialize array length for message field [path_nodes_coordinates]
    len = _deserializer.uint32(buffer, bufferOffset);
    data.path_nodes_coordinates = new Array(len);
    for (let i = 0; i < len; ++i) {
      data.path_nodes_coordinates[i] = geometry_msgs.msg.Point.deserialize(buffer, bufferOffset)
    }
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += object.agent_id.length;
    length += RobotConfiguration.getMessageSize(object.robot_config);
    length += 4 * object.path_nodes.length;
    length += 24 * object.path_nodes_coordinates.length;
    return length + 12;
  }

  static datatype() {
    // Returns string type for a message object
    return 'auto_smart_factory/Path';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '939ad84ce9cf4dee708f68ad47e1aeba';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # Contains path(nodes and cordinates) generated by the node Path Planner.
    
    string agent_id
    RobotConfiguration robot_config
    int32[] path_nodes
    
    geometry_msgs/Point[] path_nodes_coordinates
    
    
    ================================================================================
    MSG: auto_smart_factory/RobotConfiguration
    # name of this robot type
    string type_name
    
    # charging rate of the battery
    float32 charging_rate
    
    # discharging rate of the battery
    float32 discharging_rate
    
    # minimum linear velocity in [m/s]
    float32 min_linear_vel
    
    # maximum linear velocity in [m/s]
    float32 max_linear_vel
    
    # maximum angular velocity in [rad/s]
    float32 max_angular_vel
    
    # maximum radius of the robot
    float32 radius
    
    # maximum package weight in [kg]
    float32 max_load
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new Path(null);
    if (msg.agent_id !== undefined) {
      resolved.agent_id = msg.agent_id;
    }
    else {
      resolved.agent_id = ''
    }

    if (msg.robot_config !== undefined) {
      resolved.robot_config = RobotConfiguration.Resolve(msg.robot_config)
    }
    else {
      resolved.robot_config = new RobotConfiguration()
    }

    if (msg.path_nodes !== undefined) {
      resolved.path_nodes = msg.path_nodes;
    }
    else {
      resolved.path_nodes = []
    }

    if (msg.path_nodes_coordinates !== undefined) {
      resolved.path_nodes_coordinates = new Array(msg.path_nodes_coordinates.length);
      for (let i = 0; i < resolved.path_nodes_coordinates.length; ++i) {
        resolved.path_nodes_coordinates[i] = geometry_msgs.msg.Point.Resolve(msg.path_nodes_coordinates[i]);
      }
    }
    else {
      resolved.path_nodes_coordinates = []
    }

    return resolved;
    }
};

module.exports = Path;
