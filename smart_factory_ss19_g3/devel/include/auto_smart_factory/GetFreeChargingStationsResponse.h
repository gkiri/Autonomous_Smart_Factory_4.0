// Generated by gencpp from file auto_smart_factory/GetFreeChargingStationsResponse.msg
// DO NOT EDIT!


#ifndef AUTO_SMART_FACTORY_MESSAGE_GETFREECHARGINGSTATIONSRESPONSE_H
#define AUTO_SMART_FACTORY_MESSAGE_GETFREECHARGINGSTATIONSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <auto_smart_factory/Tray.h>

namespace auto_smart_factory
{
template <class ContainerAllocator>
struct GetFreeChargingStationsResponse_
{
  typedef GetFreeChargingStationsResponse_<ContainerAllocator> Type;

  GetFreeChargingStationsResponse_()
    : charging_stations()  {
    }
  GetFreeChargingStationsResponse_(const ContainerAllocator& _alloc)
    : charging_stations(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::auto_smart_factory::Tray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::auto_smart_factory::Tray_<ContainerAllocator> >::other >  _charging_stations_type;
  _charging_stations_type charging_stations;





  typedef boost::shared_ptr< ::auto_smart_factory::GetFreeChargingStationsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auto_smart_factory::GetFreeChargingStationsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetFreeChargingStationsResponse_

typedef ::auto_smart_factory::GetFreeChargingStationsResponse_<std::allocator<void> > GetFreeChargingStationsResponse;

typedef boost::shared_ptr< ::auto_smart_factory::GetFreeChargingStationsResponse > GetFreeChargingStationsResponsePtr;
typedef boost::shared_ptr< ::auto_smart_factory::GetFreeChargingStationsResponse const> GetFreeChargingStationsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::auto_smart_factory::GetFreeChargingStationsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::auto_smart_factory::GetFreeChargingStationsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace auto_smart_factory

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'auto_smart_factory': ['/home/nishant/smart_factory_ss19_g3/src/auto_smart_factory/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::auto_smart_factory::GetFreeChargingStationsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::auto_smart_factory::GetFreeChargingStationsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auto_smart_factory::GetFreeChargingStationsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auto_smart_factory::GetFreeChargingStationsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auto_smart_factory::GetFreeChargingStationsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auto_smart_factory::GetFreeChargingStationsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::auto_smart_factory::GetFreeChargingStationsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7fb2a4c1b47848e858cbbcedcada5418";
  }

  static const char* value(const ::auto_smart_factory::GetFreeChargingStationsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7fb2a4c1b47848e8ULL;
  static const uint64_t static_value2 = 0x58cbbcedcada5418ULL;
};

template<class ContainerAllocator>
struct DataType< ::auto_smart_factory::GetFreeChargingStationsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "auto_smart_factory/GetFreeChargingStationsResponse";
  }

  static const char* value(const ::auto_smart_factory::GetFreeChargingStationsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::auto_smart_factory::GetFreeChargingStationsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Tray[] charging_stations\n\
\n\
\n\
================================================================================\n\
MSG: auto_smart_factory/Tray\n\
# The representation of a warehouse tray\n\
\n\
# the unique identifier of this tray\n\
uint32 id\n\
\n\
# the type of the tray. Valid values: 'input', 'output' and 'storage'\n\
string type\n\
\n\
# the coordinates of the center of the tray in the '/map' frame\n\
float32 x\n\
float32 y\n\
\n\
# the yaw angle of the tray in the '/map' frame (ccw, in degree). Currently only multiples of 90 degree are supported.\n\
float32 orientation\n\
\n\
# maximum load, i.e. the maximum weight of packages to be put into this tray\n\
float32 max_load\n\
\n\
# package type this tray can carry. 0 means no constraints.\n\
uint32 package_type\n\
";
  }

  static const char* value(const ::auto_smart_factory::GetFreeChargingStationsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::auto_smart_factory::GetFreeChargingStationsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.charging_stations);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetFreeChargingStationsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auto_smart_factory::GetFreeChargingStationsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::auto_smart_factory::GetFreeChargingStationsResponse_<ContainerAllocator>& v)
  {
    s << indent << "charging_stations[]" << std::endl;
    for (size_t i = 0; i < v.charging_stations.size(); ++i)
    {
      s << indent << "  charging_stations[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::auto_smart_factory::Tray_<ContainerAllocator> >::stream(s, indent + "    ", v.charging_stations[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTO_SMART_FACTORY_MESSAGE_GETFREECHARGINGSTATIONSRESPONSE_H
