// Generated by gencpp from file auto_smart_factory/RoadmapGraph.msg
// DO NOT EDIT!


#ifndef AUTO_SMART_FACTORY_MESSAGE_ROADMAPGRAPH_H
#define AUTO_SMART_FACTORY_MESSAGE_ROADMAPGRAPH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace auto_smart_factory
{
template <class ContainerAllocator>
struct RoadmapGraph_
{
  typedef RoadmapGraph_<ContainerAllocator> Type;

  RoadmapGraph_()
    : num_nodes(0)
    , num_edges(0)
    , coordinates()
    , x_coord_int()
    , y_coord_int()
    , resolution(0.0)
    , height(0.0)
    , width(0.0)
    , start_nodes()
    , end_nodes()
    , lengths()
    , is_grid_edge()  {
    }
  RoadmapGraph_(const ContainerAllocator& _alloc)
    : num_nodes(0)
    , num_edges(0)
    , coordinates(_alloc)
    , x_coord_int(_alloc)
    , y_coord_int(_alloc)
    , resolution(0.0)
    , height(0.0)
    , width(0.0)
    , start_nodes(_alloc)
    , end_nodes(_alloc)
    , lengths(_alloc)
    , is_grid_edge(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _num_nodes_type;
  _num_nodes_type num_nodes;

   typedef int32_t _num_edges_type;
  _num_edges_type num_edges;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _coordinates_type;
  _coordinates_type coordinates;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _x_coord_int_type;
  _x_coord_int_type x_coord_int;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _y_coord_int_type;
  _y_coord_int_type y_coord_int;

   typedef double _resolution_type;
  _resolution_type resolution;

   typedef double _height_type;
  _height_type height;

   typedef double _width_type;
  _width_type width;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _start_nodes_type;
  _start_nodes_type start_nodes;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _end_nodes_type;
  _end_nodes_type end_nodes;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _lengths_type;
  _lengths_type lengths;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _is_grid_edge_type;
  _is_grid_edge_type is_grid_edge;





  typedef boost::shared_ptr< ::auto_smart_factory::RoadmapGraph_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auto_smart_factory::RoadmapGraph_<ContainerAllocator> const> ConstPtr;

}; // struct RoadmapGraph_

typedef ::auto_smart_factory::RoadmapGraph_<std::allocator<void> > RoadmapGraph;

typedef boost::shared_ptr< ::auto_smart_factory::RoadmapGraph > RoadmapGraphPtr;
typedef boost::shared_ptr< ::auto_smart_factory::RoadmapGraph const> RoadmapGraphConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::auto_smart_factory::RoadmapGraph_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::auto_smart_factory::RoadmapGraph_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace auto_smart_factory

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'auto_smart_factory': ['/home/nishant/smart_factory_ss19_g3/src/auto_smart_factory/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::auto_smart_factory::RoadmapGraph_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::auto_smart_factory::RoadmapGraph_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auto_smart_factory::RoadmapGraph_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auto_smart_factory::RoadmapGraph_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auto_smart_factory::RoadmapGraph_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auto_smart_factory::RoadmapGraph_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::auto_smart_factory::RoadmapGraph_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9ee7bfaa057f75fef2b5b8f6e79f93ea";
  }

  static const char* value(const ::auto_smart_factory::RoadmapGraph_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9ee7bfaa057f75feULL;
  static const uint64_t static_value2 = 0xf2b5b8f6e79f93eaULL;
};

template<class ContainerAllocator>
struct DataType< ::auto_smart_factory::RoadmapGraph_<ContainerAllocator> >
{
  static const char* value()
  {
    return "auto_smart_factory/RoadmapGraph";
  }

  static const char* value(const ::auto_smart_factory::RoadmapGraph_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::auto_smart_factory::RoadmapGraph_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Contains the graph created by Roadmap Generator and the corresponding coordinates.\n\
\n\
# node names are assumed to be natural numbers from 0 to num_nodes\n\
int32 num_nodes\n\
int32 num_edges\n\
\n\
# coordinates that correspond to nodes\n\
geometry_msgs/Point[] coordinates\n\
\n\
# integer coordinates correspond to real coordinates but grid nodes have distance 1\n\
int32[] x_coord_int\n\
int32[] y_coord_int\n\
\n\
# resolution is the distance between two grid nodes\n\
float64 resolution\n\
float64 height\n\
float64 width\n\
\n\
# edges are given as two arrays, third array contains the length (in real value, not int)\n\
int32[] start_nodes\n\
int32[] end_nodes\n\
float64[] lengths\n\
\n\
# contains value True if edge is grid edge, False otherwise\n\
bool[] is_grid_edge\n\
\n\
# start_nodes.length() == end_nodes.length() == lengths.length() == is_grid_edge.length() must always be true\n\
 \n\
\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::auto_smart_factory::RoadmapGraph_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::auto_smart_factory::RoadmapGraph_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num_nodes);
      stream.next(m.num_edges);
      stream.next(m.coordinates);
      stream.next(m.x_coord_int);
      stream.next(m.y_coord_int);
      stream.next(m.resolution);
      stream.next(m.height);
      stream.next(m.width);
      stream.next(m.start_nodes);
      stream.next(m.end_nodes);
      stream.next(m.lengths);
      stream.next(m.is_grid_edge);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RoadmapGraph_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auto_smart_factory::RoadmapGraph_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::auto_smart_factory::RoadmapGraph_<ContainerAllocator>& v)
  {
    s << indent << "num_nodes: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_nodes);
    s << indent << "num_edges: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_edges);
    s << indent << "coordinates[]" << std::endl;
    for (size_t i = 0; i < v.coordinates.size(); ++i)
    {
      s << indent << "  coordinates[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.coordinates[i]);
    }
    s << indent << "x_coord_int[]" << std::endl;
    for (size_t i = 0; i < v.x_coord_int.size(); ++i)
    {
      s << indent << "  x_coord_int[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.x_coord_int[i]);
    }
    s << indent << "y_coord_int[]" << std::endl;
    for (size_t i = 0; i < v.y_coord_int.size(); ++i)
    {
      s << indent << "  y_coord_int[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.y_coord_int[i]);
    }
    s << indent << "resolution: ";
    Printer<double>::stream(s, indent + "  ", v.resolution);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "start_nodes[]" << std::endl;
    for (size_t i = 0; i < v.start_nodes.size(); ++i)
    {
      s << indent << "  start_nodes[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.start_nodes[i]);
    }
    s << indent << "end_nodes[]" << std::endl;
    for (size_t i = 0; i < v.end_nodes.size(); ++i)
    {
      s << indent << "  end_nodes[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.end_nodes[i]);
    }
    s << indent << "lengths[]" << std::endl;
    for (size_t i = 0; i < v.lengths.size(); ++i)
    {
      s << indent << "  lengths[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.lengths[i]);
    }
    s << indent << "is_grid_edge[]" << std::endl;
    for (size_t i = 0; i < v.is_grid_edge.size(); ++i)
    {
      s << indent << "  is_grid_edge[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.is_grid_edge[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTO_SMART_FACTORY_MESSAGE_ROADMAPGRAPH_H
