// Generated by gencpp from file auto_smart_factory/CollisionAction.msg
// DO NOT EDIT!


#ifndef AUTO_SMART_FACTORY_MESSAGE_COLLISIONACTION_H
#define AUTO_SMART_FACTORY_MESSAGE_COLLISIONACTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace auto_smart_factory
{
template <class ContainerAllocator>
struct CollisionAction_
{
  typedef CollisionAction_<ContainerAllocator> Type;

  CollisionAction_()
    : RobotId()
    , halt(false)
    , time_to_halt(0.0)  {
    }
  CollisionAction_(const ContainerAllocator& _alloc)
    : RobotId(_alloc)
    , halt(false)
    , time_to_halt(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _RobotId_type;
  _RobotId_type RobotId;

   typedef uint8_t _halt_type;
  _halt_type halt;

   typedef float _time_to_halt_type;
  _time_to_halt_type time_to_halt;





  typedef boost::shared_ptr< ::auto_smart_factory::CollisionAction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auto_smart_factory::CollisionAction_<ContainerAllocator> const> ConstPtr;

}; // struct CollisionAction_

typedef ::auto_smart_factory::CollisionAction_<std::allocator<void> > CollisionAction;

typedef boost::shared_ptr< ::auto_smart_factory::CollisionAction > CollisionActionPtr;
typedef boost::shared_ptr< ::auto_smart_factory::CollisionAction const> CollisionActionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::auto_smart_factory::CollisionAction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::auto_smart_factory::CollisionAction_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace auto_smart_factory

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'auto_smart_factory': ['/home/nishant/smart_factory_ss19_g3/src/auto_smart_factory/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::auto_smart_factory::CollisionAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::auto_smart_factory::CollisionAction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auto_smart_factory::CollisionAction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auto_smart_factory::CollisionAction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auto_smart_factory::CollisionAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auto_smart_factory::CollisionAction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::auto_smart_factory::CollisionAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7d85d6f3795d2f6173839c2dc98263c5";
  }

  static const char* value(const ::auto_smart_factory::CollisionAction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7d85d6f3795d2f61ULL;
  static const uint64_t static_value2 = 0x73839c2dc98263c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::auto_smart_factory::CollisionAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "auto_smart_factory/CollisionAction";
  }

  static const char* value(const ::auto_smart_factory::CollisionAction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::auto_smart_factory::CollisionAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# publishes robot ID\n\
# publishes if robot needs to halt completely or only stops moving until a strategy found\n\
# specifies duration of halt\n\
\n\
string RobotId\n\
bool halt\n\
float32 time_to_halt\n\
";
  }

  static const char* value(const ::auto_smart_factory::CollisionAction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::auto_smart_factory::CollisionAction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.RobotId);
      stream.next(m.halt);
      stream.next(m.time_to_halt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CollisionAction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auto_smart_factory::CollisionAction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::auto_smart_factory::CollisionAction_<ContainerAllocator>& v)
  {
    s << indent << "RobotId: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.RobotId);
    s << indent << "halt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.halt);
    s << indent << "time_to_halt: ";
    Printer<float>::stream(s, indent + "  ", v.time_to_halt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTO_SMART_FACTORY_MESSAGE_COLLISIONACTION_H
