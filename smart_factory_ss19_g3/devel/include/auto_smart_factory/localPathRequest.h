// Generated by gencpp from file auto_smart_factory/localPathRequest.msg
// DO NOT EDIT!


#ifndef AUTO_SMART_FACTORY_MESSAGE_LOCALPATHREQUEST_H
#define AUTO_SMART_FACTORY_MESSAGE_LOCALPATHREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <auto_smart_factory/RobotConfiguration.h>

namespace auto_smart_factory
{
template <class ContainerAllocator>
struct localPathRequest_
{
  typedef localPathRequest_<ContainerAllocator> Type;

  localPathRequest_()
    : trayID(0)
    , obstacleLeft()
    , obstacleFront()
    , obstacleRight()
    , robot()  {
    }
  localPathRequest_(const ContainerAllocator& _alloc)
    : trayID(0)
    , obstacleLeft(_alloc)
    , obstacleFront(_alloc)
    , obstacleRight(_alloc)
    , robot(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _trayID_type;
  _trayID_type trayID;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _obstacleLeft_type;
  _obstacleLeft_type obstacleLeft;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _obstacleFront_type;
  _obstacleFront_type obstacleFront;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _obstacleRight_type;
  _obstacleRight_type obstacleRight;

   typedef  ::auto_smart_factory::RobotConfiguration_<ContainerAllocator>  _robot_type;
  _robot_type robot;





  typedef boost::shared_ptr< ::auto_smart_factory::localPathRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auto_smart_factory::localPathRequest_<ContainerAllocator> const> ConstPtr;

}; // struct localPathRequest_

typedef ::auto_smart_factory::localPathRequest_<std::allocator<void> > localPathRequest;

typedef boost::shared_ptr< ::auto_smart_factory::localPathRequest > localPathRequestPtr;
typedef boost::shared_ptr< ::auto_smart_factory::localPathRequest const> localPathRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::auto_smart_factory::localPathRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::auto_smart_factory::localPathRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace auto_smart_factory

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'auto_smart_factory': ['/home/nishant/smart_factory_ss19_g3/src/auto_smart_factory/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::auto_smart_factory::localPathRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::auto_smart_factory::localPathRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auto_smart_factory::localPathRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auto_smart_factory::localPathRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auto_smart_factory::localPathRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auto_smart_factory::localPathRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::auto_smart_factory::localPathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e5f4d3c20e760d513e9ea62b4893ebf3";
  }

  static const char* value(const ::auto_smart_factory::localPathRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe5f4d3c20e760d51ULL;
  static const uint64_t static_value2 = 0x3e9ea62b4893ebf3ULL;
};

template<class ContainerAllocator>
struct DataType< ::auto_smart_factory::localPathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "auto_smart_factory/localPathRequest";
  }

  static const char* value(const ::auto_smart_factory::localPathRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::auto_smart_factory::localPathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 trayID\n\
geometry_msgs/Point obstacleLeft\n\
geometry_msgs/Point obstacleFront\n\
geometry_msgs/Point obstacleRight\n\
RobotConfiguration robot\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: auto_smart_factory/RobotConfiguration\n\
# name of this robot type\n\
string type_name\n\
\n\
# charging rate of the battery\n\
float32 charging_rate\n\
\n\
# discharging rate of the battery\n\
float32 discharging_rate\n\
\n\
# minimum linear velocity in [m/s]\n\
float32 min_linear_vel\n\
\n\
# maximum linear velocity in [m/s]\n\
float32 max_linear_vel\n\
\n\
# maximum angular velocity in [rad/s]\n\
float32 max_angular_vel\n\
\n\
# maximum radius of the robot\n\
float32 radius\n\
\n\
# maximum package weight in [kg]\n\
float32 max_load\n\
";
  }

  static const char* value(const ::auto_smart_factory::localPathRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::auto_smart_factory::localPathRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.trayID);
      stream.next(m.obstacleLeft);
      stream.next(m.obstacleFront);
      stream.next(m.obstacleRight);
      stream.next(m.robot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct localPathRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auto_smart_factory::localPathRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::auto_smart_factory::localPathRequest_<ContainerAllocator>& v)
  {
    s << indent << "trayID: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.trayID);
    s << indent << "obstacleLeft: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacleLeft);
    s << indent << "obstacleFront: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacleFront);
    s << indent << "obstacleRight: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacleRight);
    s << indent << "robot: ";
    s << std::endl;
    Printer< ::auto_smart_factory::RobotConfiguration_<ContainerAllocator> >::stream(s, indent + "  ", v.robot);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTO_SMART_FACTORY_MESSAGE_LOCALPATHREQUEST_H
