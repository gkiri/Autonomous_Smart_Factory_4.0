// Generated by gencpp from file auto_smart_factory/outputRequestResponse.msg
// DO NOT EDIT!


#ifndef AUTO_SMART_FACTORY_MESSAGE_OUTPUTREQUESTRESPONSE_H
#define AUTO_SMART_FACTORY_MESSAGE_OUTPUTREQUESTRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace auto_smart_factory
{
template <class ContainerAllocator>
struct outputRequestResponse_
{
  typedef outputRequestResponse_<ContainerAllocator> Type;

  outputRequestResponse_()
    : pointsToTray()
    , pointsToOutput()
    , idBest(0)
    , length(0.0)  {
    }
  outputRequestResponse_(const ContainerAllocator& _alloc)
    : pointsToTray(_alloc)
    , pointsToOutput(_alloc)
    , idBest(0)
    , length(0.0)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _pointsToTray_type;
  _pointsToTray_type pointsToTray;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _pointsToOutput_type;
  _pointsToOutput_type pointsToOutput;

   typedef uint32_t _idBest_type;
  _idBest_type idBest;

   typedef double _length_type;
  _length_type length;





  typedef boost::shared_ptr< ::auto_smart_factory::outputRequestResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auto_smart_factory::outputRequestResponse_<ContainerAllocator> const> ConstPtr;

}; // struct outputRequestResponse_

typedef ::auto_smart_factory::outputRequestResponse_<std::allocator<void> > outputRequestResponse;

typedef boost::shared_ptr< ::auto_smart_factory::outputRequestResponse > outputRequestResponsePtr;
typedef boost::shared_ptr< ::auto_smart_factory::outputRequestResponse const> outputRequestResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::auto_smart_factory::outputRequestResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::auto_smart_factory::outputRequestResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace auto_smart_factory

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'auto_smart_factory': ['/home/nishant/smart_factory_ss19_g3/src/auto_smart_factory/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::auto_smart_factory::outputRequestResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::auto_smart_factory::outputRequestResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auto_smart_factory::outputRequestResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auto_smart_factory::outputRequestResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auto_smart_factory::outputRequestResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auto_smart_factory::outputRequestResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::auto_smart_factory::outputRequestResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a02a86b1edfdc92f7484204d045d30c6";
  }

  static const char* value(const ::auto_smart_factory::outputRequestResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa02a86b1edfdc92fULL;
  static const uint64_t static_value2 = 0x7484204d045d30c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::auto_smart_factory::outputRequestResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "auto_smart_factory/outputRequestResponse";
  }

  static const char* value(const ::auto_smart_factory::outputRequestResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::auto_smart_factory::outputRequestResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point[] pointsToTray\n\
geometry_msgs/Point[] pointsToOutput\n\
uint32 idBest\n\
float64 length\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::auto_smart_factory::outputRequestResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::auto_smart_factory::outputRequestResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pointsToTray);
      stream.next(m.pointsToOutput);
      stream.next(m.idBest);
      stream.next(m.length);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct outputRequestResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auto_smart_factory::outputRequestResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::auto_smart_factory::outputRequestResponse_<ContainerAllocator>& v)
  {
    s << indent << "pointsToTray[]" << std::endl;
    for (size_t i = 0; i < v.pointsToTray.size(); ++i)
    {
      s << indent << "  pointsToTray[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.pointsToTray[i]);
    }
    s << indent << "pointsToOutput[]" << std::endl;
    for (size_t i = 0; i < v.pointsToOutput.size(); ++i)
    {
      s << indent << "  pointsToOutput[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.pointsToOutput[i]);
    }
    s << indent << "idBest: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.idBest);
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTO_SMART_FACTORY_MESSAGE_OUTPUTREQUESTRESPONSE_H
