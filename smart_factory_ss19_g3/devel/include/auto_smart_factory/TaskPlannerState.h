// Generated by gencpp from file auto_smart_factory/TaskPlannerState.msg
// DO NOT EDIT!


#ifndef AUTO_SMART_FACTORY_MESSAGE_TASKPLANNERSTATE_H
#define AUTO_SMART_FACTORY_MESSAGE_TASKPLANNERSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <auto_smart_factory/RequestStatus.h>
#include <auto_smart_factory/TaskState.h>

namespace auto_smart_factory
{
template <class ContainerAllocator>
struct TaskPlannerState_
{
  typedef TaskPlannerState_<ContainerAllocator> Type;

  TaskPlannerState_()
    : stamp()
    , registered_robots(0)
    , requests()
    , tasks()  {
    }
  TaskPlannerState_(const ContainerAllocator& _alloc)
    : stamp()
    , registered_robots(0)
    , requests(_alloc)
    , tasks(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef uint32_t _registered_robots_type;
  _registered_robots_type registered_robots;

   typedef std::vector< ::auto_smart_factory::RequestStatus_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::auto_smart_factory::RequestStatus_<ContainerAllocator> >::other >  _requests_type;
  _requests_type requests;

   typedef std::vector< ::auto_smart_factory::TaskState_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::auto_smart_factory::TaskState_<ContainerAllocator> >::other >  _tasks_type;
  _tasks_type tasks;





  typedef boost::shared_ptr< ::auto_smart_factory::TaskPlannerState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auto_smart_factory::TaskPlannerState_<ContainerAllocator> const> ConstPtr;

}; // struct TaskPlannerState_

typedef ::auto_smart_factory::TaskPlannerState_<std::allocator<void> > TaskPlannerState;

typedef boost::shared_ptr< ::auto_smart_factory::TaskPlannerState > TaskPlannerStatePtr;
typedef boost::shared_ptr< ::auto_smart_factory::TaskPlannerState const> TaskPlannerStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::auto_smart_factory::TaskPlannerState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::auto_smart_factory::TaskPlannerState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace auto_smart_factory

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'auto_smart_factory': ['/home/nishant/smart_factory_ss19_g3/src/auto_smart_factory/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::auto_smart_factory::TaskPlannerState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::auto_smart_factory::TaskPlannerState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auto_smart_factory::TaskPlannerState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auto_smart_factory::TaskPlannerState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auto_smart_factory::TaskPlannerState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auto_smart_factory::TaskPlannerState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::auto_smart_factory::TaskPlannerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d68409037940351182a0a455e9df6526";
  }

  static const char* value(const ::auto_smart_factory::TaskPlannerState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd684090379403511ULL;
  static const uint64_t static_value2 = 0x82a0a455e9df6526ULL;
};

template<class ContainerAllocator>
struct DataType< ::auto_smart_factory::TaskPlannerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "auto_smart_factory/TaskPlannerState";
  }

  static const char* value(const ::auto_smart_factory::TaskPlannerState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::auto_smart_factory::TaskPlannerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n\
\n\
# number of registered robots\n\
uint32 registered_robots\n\
\n\
# States of the current requests\n\
RequestStatus[] requests\n\
\n\
# states of the current tasks\n\
TaskState[] tasks\n\
\n\
\n\
================================================================================\n\
MSG: auto_smart_factory/RequestStatus\n\
# time stamp for this status message\n\
time stamp\n\
\n\
# id of this request\n\
uint32 id\n\
\n\
# type of request. This is either 'input' or 'output'\n\
string type\n\
\n\
# the package type\n\
PackageConfiguration pkg_config\n\
\n\
# time when this request was created\n\
time create_time\n\
\n\
# message describing the current status of this request\n\
string status\n\
\n\
\n\
================================================================================\n\
MSG: auto_smart_factory/PackageConfiguration\n\
# package type id (!= package id)\n\
uint32 id\n\
\n\
# package dimensions\n\
float32 width\n\
float32 height\n\
\n\
# package weight\n\
float32 weight\n\
\n\
\n\
================================================================================\n\
MSG: auto_smart_factory/TaskState\n\
# unique task id\n\
uint32 id\n\
\n\
# the state of the task. Valid values: 'initialized', 'running', 'waiting for package', ...\n\
string status\n\
\n\
# timings (0 if not yet set)\n\
\n\
# time when the associated request was created\n\
time requestCreateTime\n\
\n\
# timestamp when the task was started\n\
time runTime\n\
\n\
# timestamp when the load was acknowledged\n\
time loadTime\n\
\n\
# timestamp when the unload was acknowledged\n\
time unloadTime\n\
\n\
# estimated duration from run to unload estimated by the roadmap planner\n\
duration estimatedDuration\n\
\n\
# task data\n\
\n\
# id of the assigned robot\n\
string robot\n\
\n\
# Package this task is dealing with.\n\
Package package\n\
\n\
# The source and the target of this task\n\
uint32 sourceTray\n\
uint32 targetTray\n\
\n\
\n\
================================================================================\n\
MSG: auto_smart_factory/Package\n\
# the unique id of this package\n\
uint32 id\n\
\n\
# the id of the package type/configuration\n\
uint32 type_id\n\
\n\
";
  }

  static const char* value(const ::auto_smart_factory::TaskPlannerState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::auto_smart_factory::TaskPlannerState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.registered_robots);
      stream.next(m.requests);
      stream.next(m.tasks);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TaskPlannerState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auto_smart_factory::TaskPlannerState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::auto_smart_factory::TaskPlannerState_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "registered_robots: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.registered_robots);
    s << indent << "requests[]" << std::endl;
    for (size_t i = 0; i < v.requests.size(); ++i)
    {
      s << indent << "  requests[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::auto_smart_factory::RequestStatus_<ContainerAllocator> >::stream(s, indent + "    ", v.requests[i]);
    }
    s << indent << "tasks[]" << std::endl;
    for (size_t i = 0; i < v.tasks.size(); ++i)
    {
      s << indent << "  tasks[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::auto_smart_factory::TaskState_<ContainerAllocator> >::stream(s, indent + "    ", v.tasks[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTO_SMART_FACTORY_MESSAGE_TASKPLANNERSTATE_H
