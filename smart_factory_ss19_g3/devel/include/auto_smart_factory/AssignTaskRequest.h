// Generated by gencpp from file auto_smart_factory/AssignTaskRequest.msg
// DO NOT EDIT!


#ifndef AUTO_SMART_FACTORY_MESSAGE_ASSIGNTASKREQUEST_H
#define AUTO_SMART_FACTORY_MESSAGE_ASSIGNTASKREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace auto_smart_factory
{
template <class ContainerAllocator>
struct AssignTaskRequest_
{
  typedef AssignTaskRequest_<ContainerAllocator> Type;

  AssignTaskRequest_()
    : task_id(0)
    , input_tray(0)
    , storage_tray(0)  {
    }
  AssignTaskRequest_(const ContainerAllocator& _alloc)
    : task_id(0)
    , input_tray(0)
    , storage_tray(0)  {
  (void)_alloc;
    }



   typedef uint32_t _task_id_type;
  _task_id_type task_id;

   typedef uint32_t _input_tray_type;
  _input_tray_type input_tray;

   typedef uint32_t _storage_tray_type;
  _storage_tray_type storage_tray;





  typedef boost::shared_ptr< ::auto_smart_factory::AssignTaskRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auto_smart_factory::AssignTaskRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AssignTaskRequest_

typedef ::auto_smart_factory::AssignTaskRequest_<std::allocator<void> > AssignTaskRequest;

typedef boost::shared_ptr< ::auto_smart_factory::AssignTaskRequest > AssignTaskRequestPtr;
typedef boost::shared_ptr< ::auto_smart_factory::AssignTaskRequest const> AssignTaskRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::auto_smart_factory::AssignTaskRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::auto_smart_factory::AssignTaskRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace auto_smart_factory

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'auto_smart_factory': ['/home/nishant/smart_factory_ss19_g3/src/auto_smart_factory/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::auto_smart_factory::AssignTaskRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::auto_smart_factory::AssignTaskRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auto_smart_factory::AssignTaskRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auto_smart_factory::AssignTaskRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auto_smart_factory::AssignTaskRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auto_smart_factory::AssignTaskRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::auto_smart_factory::AssignTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7e1025196507fa3ea25794bc2bb0cfe4";
  }

  static const char* value(const ::auto_smart_factory::AssignTaskRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7e1025196507fa3eULL;
  static const uint64_t static_value2 = 0xa25794bc2bb0cfe4ULL;
};

template<class ContainerAllocator>
struct DataType< ::auto_smart_factory::AssignTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "auto_smart_factory/AssignTaskRequest";
  }

  static const char* value(const ::auto_smart_factory::AssignTaskRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::auto_smart_factory::AssignTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 task_id\n\
uint32 input_tray\n\
uint32 storage_tray\n\
";
  }

  static const char* value(const ::auto_smart_factory::AssignTaskRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::auto_smart_factory::AssignTaskRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task_id);
      stream.next(m.input_tray);
      stream.next(m.storage_tray);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AssignTaskRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auto_smart_factory::AssignTaskRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::auto_smart_factory::AssignTaskRequest_<ContainerAllocator>& v)
  {
    s << indent << "task_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.task_id);
    s << indent << "input_tray: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.input_tray);
    s << indent << "storage_tray: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.storage_tray);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTO_SMART_FACTORY_MESSAGE_ASSIGNTASKREQUEST_H
